// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package valuesets

import (
	"errors"
	"fmt"
)

const (
	// MaritalStatusUnset is a MaritalStatus of type Unset.
	MaritalStatusUnset MaritalStatus = ""
	// MaritalStatusAnnulled is a MaritalStatus of type Annulled.
	MaritalStatusAnnulled MaritalStatus = "A"
	// MaritalStatusDivorced is a MaritalStatus of type Divorced.
	MaritalStatusDivorced MaritalStatus = "D"
	// MaritalStatusInterlocutory is a MaritalStatus of type Interlocutory.
	MaritalStatusInterlocutory MaritalStatus = "I"
	// MaritalStatusLegallySeparated is a MaritalStatus of type LegallySeparated.
	MaritalStatusLegallySeparated MaritalStatus = "L"
	// MaritalStatusMarried is a MaritalStatus of type Married.
	MaritalStatusMarried MaritalStatus = "M"
	// MaritalStatusCommonLaw is a MaritalStatus of type CommonLaw.
	MaritalStatusCommonLaw MaritalStatus = "C"
	// MaritalStatusPolygamous is a MaritalStatus of type Polygamous.
	MaritalStatusPolygamous MaritalStatus = "P"
	// MaritalStatusDomesticPartner is a MaritalStatus of type DomesticPartner.
	MaritalStatusDomesticPartner MaritalStatus = "T"
	// MaritalStatusUnmarried is a MaritalStatus of type Unmarried.
	MaritalStatusUnmarried MaritalStatus = "U"
	// MaritalStatusNeverMarried is a MaritalStatus of type NeverMarried.
	MaritalStatusNeverMarried MaritalStatus = "S"
	// MaritalStatusWidowed is a MaritalStatus of type Widowed.
	MaritalStatusWidowed MaritalStatus = "W"
	// MaritalStatusUnknown is a MaritalStatus of type Unknown.
	MaritalStatusUnknown MaritalStatus = "UNK"
)

var ErrInvalidMaritalStatus = errors.New("not a valid MaritalStatus")

// String implements the Stringer interface.
func (x MaritalStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MaritalStatus) IsValid() bool {
	_, err := ParseMaritalStatus(string(x))
	return err == nil
}

var _MaritalStatusValue = map[string]MaritalStatus{
	"":    MaritalStatusUnset,
	"A":   MaritalStatusAnnulled,
	"D":   MaritalStatusDivorced,
	"I":   MaritalStatusInterlocutory,
	"L":   MaritalStatusLegallySeparated,
	"M":   MaritalStatusMarried,
	"C":   MaritalStatusCommonLaw,
	"P":   MaritalStatusPolygamous,
	"T":   MaritalStatusDomesticPartner,
	"U":   MaritalStatusUnmarried,
	"S":   MaritalStatusNeverMarried,
	"W":   MaritalStatusWidowed,
	"UNK": MaritalStatusUnknown,
}

// ParseMaritalStatus attempts to convert a string to a MaritalStatus.
func ParseMaritalStatus(name string) (MaritalStatus, error) {
	if x, ok := _MaritalStatusValue[name]; ok {
		return x, nil
	}
	return MaritalStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidMaritalStatus)
}

// MarshalText implements the text marshaller method.
func (x MaritalStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MaritalStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseMaritalStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
