// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package valuesets

import (
	"errors"
	"fmt"
)

const (
	// IssueSeverityUnset is a IssueSeverity of type Unset.
	IssueSeverityUnset IssueSeverity = ""
	// IssueSeverityFatal is a IssueSeverity of type fatal.
	IssueSeverityFatal IssueSeverity = "fatal"
	// IssueSeverityError is a IssueSeverity of type error.
	IssueSeverityError IssueSeverity = "error"
	// IssueSeverityWarning is a IssueSeverity of type warning.
	IssueSeverityWarning IssueSeverity = "warning"
	// IssueSeverityInformation is a IssueSeverity of type information.
	IssueSeverityInformation IssueSeverity = "information"
	// IssueSeveritySuccess is a IssueSeverity of type success.
	IssueSeveritySuccess IssueSeverity = "success"
)

var ErrInvalidIssueSeverity = errors.New("not a valid IssueSeverity")

// String implements the Stringer interface.
func (x IssueSeverity) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x IssueSeverity) IsValid() bool {
	_, err := ParseIssueSeverity(string(x))
	return err == nil
}

var _IssueSeverityValue = map[string]IssueSeverity{
	"":            IssueSeverityUnset,
	"fatal":       IssueSeverityFatal,
	"error":       IssueSeverityError,
	"warning":     IssueSeverityWarning,
	"information": IssueSeverityInformation,
	"success":     IssueSeveritySuccess,
}

// ParseIssueSeverity attempts to convert a string to a IssueSeverity.
func ParseIssueSeverity(name string) (IssueSeverity, error) {
	if x, ok := _IssueSeverityValue[name]; ok {
		return x, nil
	}
	return IssueSeverity(""), fmt.Errorf("%s is %w", name, ErrInvalidIssueSeverity)
}

// MarshalText implements the text marshaller method.
func (x IssueSeverity) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *IssueSeverity) UnmarshalText(text []byte) error {
	tmp, err := ParseIssueSeverity(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
